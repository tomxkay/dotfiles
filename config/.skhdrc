# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #

# Opening applications
ctrl + shift + alt - t : open -a iTerm.app
ctrl + shift + alt - s : open -a Simulator.app

# Floating mode - Snap to layout
ctrl + shift + alt - h : yabai -m window --grid 1:3:0:0:2:1 # left 2/3
ctrl + shift + alt - l : yabai -m window --grid 1:3:1:0:2:1 # right 2/3
ctrl + shift + alt - j : yabai -m window --grid 8:6:1:1:4:6 # center
ctrl + shift + alt - k : yabai -m window --grid 1:1:1:1:1:1 # fullscreen
ctrl + shift + alt - w : yabai -m window --grid 8:8:2:1:4:7 # center workspace

# Floating mode - Move floating window
ctrl + shift + alt - left : yabai -m window --move rel:-20:0
ctrl + shift + alt - right : yabai -m window --move rel:20:0
ctrl + shift + alt - up : yabai -m window --move rel:0:20
ctrl + shift + alt - down : yabai -m window --move rel:0:-20

# Tile mode - toggle layout
ctrl + shift + alt - return : yabai -m window --toggle float; yabai -m window --grid 8:6:1:1:4:6 # toggle floating | center
ctrl + shift + alt - space : yabai -m window --toggle float; yabai -m window --grid 8:8:2:1:4:7 # toggle floating | workspace center
ctrl + shift + alt - z : yabai -m window --toggle zoom-fullscreen # fullscreen
ctrl + shift + alt - 0 : yabai -m space --balance # normalize layout

# Tile mode - Swap managed window
ctrl + shift + alt - 7 : yabai -m window --swap south
ctrl + shift + alt - 8 : yabai -m window --swap north
ctrl + shift + alt - 6 : yabai -m window --swap west
ctrl + shift + alt - 9 : yabai -m window --swap east

# Tile mode - Focus window
ctrl + shift + alt - u : yabai -m window --focus south
ctrl + shift + alt - i : yabai -m window --focus north
ctrl + shift + alt - y : yabai -m window --focus west
ctrl + shift + alt - o : yabai -m window --focus east

# Tile mode - Toggle window split type
ctrl + shift + alt - e : yabai -m window --toggle split

# Misc - Custom picture in picture
ctrl + shift + alt - p : yabai -m window --toggle float; yabai -m window --toggle topmost; yabai -m window --toggle sticky; yabai -m window --toggle shadow

# Misc - Start/stop/restart yabai
ctrl + shift + alt + cmd - q : brew services stop yabai
ctrl + shift + alt + cmd - s: brew services start yabai
ctrl + shift + alt + cmd - r : brew services restart yabai

# create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
# shift + cmd - n : yabai -m space --create && \
#                   index="$(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == false))[-1].index')" && \
#                   yabai -m window --space "${index}" && \
#                   yabai -m space --focus "${index."

# fast focus desktop
# cmd + alt - x : yabai -m space --focus recent
# cmd + alt - 1 : yabai -m space --focus 1

# send window to desktop and follow focus
# shift + cmd - z : yabai -m window --space next; yabai -m space --focus next
# shift + cmd - 2 : yabai -m window --space  2; yabai -m space --focus 2

# focus monitor
# ctrl + alt - z  : yabai -m display --focus prev
# ctrl + alt - 3  : yabai -m display --focus 3

# send window to monitor and follow focus
# ctrl + cmd - c  : yabai -m window --display next; yabai -m display --focus next
# ctrl + cmd - 1  : yabai -m window --display 1; yabai -m display --focus 1
